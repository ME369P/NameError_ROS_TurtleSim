#! /usr/bin/env python
import rospy
from geometry_msgs.msg import Twist
from turtlesim.msg import Pose
from math import pow, atan2, sqrt
from goal.msg import DoDishesAction, DoDishesGoal
import roslib
import actionlib
import turtle_actionlib.msg

class moveTo(object):
	 _feedback = turtle_actionlib.msg.MoveFeedback()
	 _result = turtle_actionlib.msg.MoveResult()

    def __init__(self, name):
        self._action_name = name
        self._as = actionlib.SimpleActionServer(self._action_name, turtle_actionlib.msg.moveTo, execute_cb=self.execute_cb, auto_start = False)
        self._as.start()



    #will excecute every time goal received
    def execute_move_cb(self, goal):
        # helper variables
        r = rospy.Rate(1)
        success = True
        
		#initvalues
        
        # publish info
        self.goal = Twist()

        # start executing the action
        for i in range(1, goal.order):
            # check that preempt has not been requested by the client
            if self._as.is_preempt_requested():
                rospy.loginfo('%s: Preempted' % self._action_name)
                self._as.set_preempted()
                success = False
                break


                #preform move toooooooooo


        if success:
            self._result.sequence = self._feedback.sequence
            rospy.loginfo('%s: Succeeded' % self._action_name)
            self._as.set_succeeded(self._result)

if __name__ == '__main__':
    rospy.init_node('fibonacci')
    server = FibonacciAction(rospy.get_name())
    rospy.spin()